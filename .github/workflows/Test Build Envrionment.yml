name: Test Build Envrionment

# Controls when the workflow will run
on:
  schedule:
    - cron: '0 16 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  lvaptCICD: LabVIEWCLI -OperationName RunVI -VIPath "${{ github.workspace }}\lvapt-CICD.vi" -LabVIEWPath "C:\Program Files (x86)\National Instruments\LabVIEW 2019\LabVIEW.exe"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  lvCICD:
    # The type of runner that the job will run on
    name: lvCICD Preparation
    runs-on: [self-hosted]

    outputs:
      portNum: ${{ steps.ViServer.outputs.portNum }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: CloneRepo
        uses: actions/checkout@v2

      - name: GetVIPortNum
        id: ViServer
        run:
          ${{ github.workspace }}/ViServerPort.ps1 | echo "::set-output name=portNum::*"

      - name: BuildCommands
        run:
          echo ${{ steps.ViServer.outputs.portNum }}
          # https://stackoverflow.com/questions/57968497/how-do-i-set-an-env-var-with-a-bash-expression-in-github-actions#:~:text=Setting%20an%20environment%20variable%20echo%20%22%7Bname%7D%3D%7Bvalue%7D%22%20%3E%3E%20%24GITHUB_ENV,subsequent%20actions%20in%20a%20job%20will%20have%20access.
          echo "test=abc" >> $env:GITHUB_ENV

      - name: TestCommands
        run:
          echo ${{ env.test }}

      - name: TestEnvironment
        run:
          ${{ env.lvaptCICD }} -PortNumber ${{ steps.ViServer.outputs.portNum}} lvEcho "line1" "line2" "line3"

  EchoResults:
    # The type of runner that the job will run on
    runs-on: [self-hosted]
    needs: lvCICD

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: EchoResults
        run:
          echo ${{ env.lvaptCICD }}
          echo ${{ needs.lvCICD.outputs.portNum }}
